---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: perses-content-pvc
  namespace: perses-playground  # Adjust namespace as needed
  annotations:
    "helm.sh/hook-weight": "0"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi  # Adjust size as needed

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: perses-content-sync
  namespace: perses-playground  # Adjust namespace as needed
  annotations:
    "helm.sh/hook-weight": "1"
spec:
  schedule: "*/2 * * * *"  # Every 2 minutes
  concurrencyPolicy: Replace  # Replace running job if it's still running
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: content-sync
            image: {{ .Values.sapCloudInfrastructure.crane.image }}:{{ .Values.sapCloudInfrastructure.crane.version }}
            command: ["/busybox/sh"]
            args:
              - -c
              - |
                set -e
                echo "Starting content sync at $(date)"

                IMAGE_REF="{{ .Values.sapCloudInfrastructure.persesDashboardsImage.name }}:{{ .Values.sapCloudInfrastructure.persesDashboardsImage.version }}"
                SHA_FILE="/etc/perses/provisioning/.last_sha"
                
                # Get current image digest/SHA
                echo "Fetching current image digest..."
                CURRENT_SHA=$(crane digest "$IMAGE_REF")
                echo "Current image SHA: $CURRENT_SHA"
                
                # Check if we have a previous SHA stored
                if [ -f "$SHA_FILE" ]; then
                  LAST_SHA=$(cat "$SHA_FILE")
                  echo "Previous SHA: $LAST_SHA"
                  
                  if [ "$CURRENT_SHA" = "$LAST_SHA" ]; then
                    echo "✓ Content is the same - no changes detected. Skipping pull and extraction."
                    echo "Content sync completed at $(date) - no update required"
                    exit 0
                  else
                    echo "△ SHA changed - new content detected"
                    echo "  Previous: $LAST_SHA"
                    echo "  Current:  $CURRENT_SHA"
                  fi
                else
                  echo "△ No previous SHA found - first run or SHA file missing"
                fi
                
                # Create temp directory for extraction
                TEMP_DIR="/tmp/perses-extract"
                mkdir -p "$TEMP_DIR"
                
                # Pull and extract the OCI artifact using crane
                echo "Pulling image: $IMAGE_REF"
                crane export "$IMAGE_REF" - | tar -xf - -C "$TEMP_DIR"
                
                # Clear existing content in PVC (optional - remove if you want to keep old files)
                echo "Clearing existing content..."
                rm -rf /etc/perses/provisioning/* || true
                
                # Copy extracted content to PVC
                echo "Copying content to PVC..."
                cp -r "$TEMP_DIR/perses-content"/* /etc/perses/provisioning/
                
                # Store the current SHA for next comparison
                echo "$CURRENT_SHA" > "$SHA_FILE"
                echo "Stored current SHA for future comparison"
                
                # List copied files for verification
                echo "Content successfully synced. Files in PVC:"
                echo "Total JSON files: $(find /etc/perses/provisioning -name "*.json" | wc -l)"
                
                # Cleanup
                rm -rf "$TEMP_DIR"
                echo "✓ Content sync completed at $(date) - update successful"
            
            volumeMounts:
            - name: perses-content-volume
              mountPath: /etc/perses/provisioning
            
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          
          volumes:
          - name: perses-content-volume
            persistentVolumeClaim:
              claimName: perses-content-pvc