{{- if .Values.crontab }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-crontab
data:
  root: |
    {{ .Values.crontab }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-etc
data:
  postgresql.conf: |
    {{- include (print .Template.BasePath "/_postgresql.conf.tpl") . | nindent 4 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-sql-on-startup
data:
  on-startup.sql: |

    {{- /* duplicated with the code in rbac because the templating is to limited in its features */}}
    {{- $users := .Values.users }}
    {{- if .Values.persistence.createBackupUser }}
      {{- $users := merge $users (dict "backup" (dict)) }}
    {{- end }}
    {{- if .Values.createMetricsUser }}
      {{- $users := merge $users (dict "metrics" (dict)) }}
    {{- end }}

    {{- if hasKey .Values.extensions "pg_stat_statements" }}
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    {{- end }}

    SET password_encryption = 'scram-sha-256';

    -- TODO: drop with next breaking update
    SELECT 'REASSIGN OWNED BY poor_mans_pg_read_all_data TO pg_read_all_data' where exists (SELECT rolname FROM pg_roles WHERE rolname='poor_mans_pg_read_all_data')\gexec
    SELECT 'DROP OWNED BY poor_mans_pg_read_all_data' where exists (SELECT rolname FROM pg_roles WHERE rolname='poor_mans_pg_read_all_data')\gexec
    DROP ROLE IF EXISTS poor_mans_pg_read_all_data;

    {{- range $user, $settings := $users }}
    {{- $settings := default (dict) $settings }}
    SELECT 'CREATE ROLE "{{ $user }}" WITH PASSWORD ''%USER_PASSWORD_{{ $user | replace "-" "_" }}%'' LOGIN' where not exists (select rolname from pg_authid where rolname = '{{ $user }}')\gexec
    {{- /* update password in case it changed or the password hashing format changed */}}
    ALTER USER "{{ $user }}" WITH PASSWORD '%USER_PASSWORD_{{ $user | replace "-" "_" }}%';

    {{- if not (eq $user "backup" "metrics") }}
    -- https://www.postgresql.org/docs/current/ddl-priv.html
    GRANT CREATE,CONNECT,TEMPORARY ON DATABASE "%PGDATABASE%" TO "{{ $user }}";
    GRANT SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER ON ALL TABLES IN SCHEMA public TO "{{ $user }}";
    {{- end }}

    {{- range (default (list) $settings.grant) }}
    {{ . }} to "{{ $user }}";
    {{- end }}

    {{- if eq $user "backup" }}
    GRANT CONNECT ON DATABASE "%PGDATABASE%" TO backup;

    GRANT pg_read_all_data to backup;
    {{- end }}

    {{- if eq $user "metrics" }}
    GRANT pg_monitor to metrics;
    {{- if ge ($.Values.postgresVersion | int) 16 }}
    GRANT pg_use_reserved_connections to metrics;
    {{- end }}
    -- pg_read_all_data is required for custom metrics
    GRANT pg_read_all_data to metrics;
    {{- end }}
    {{- end }}

    ALTER SCHEMA public OWNER TO "%PGDATABASE%";
    SELECT 'CREATE DATABASE "%PGDATABASE%"' where not exists (SELECT 1 FROM pg_database WHERE datname = '%PGDATABASE%')\gexec
    ALTER DATABASE "%PGDATABASE%" OWNER TO "%PGDATABASE%";
    SELECT format('ALTER TABLE %I.%I.%I OWNER TO %I;', table_catalog, table_schema, table_name, '%PGDATABASE%')
      FROM information_schema.tables WHERE table_schema = 'public'\gexec
    SELECT FORMAT('ALTER TYPE %I.%I.%I OWNER TO %I;', current_database()::information_schema.sql_identifier, n.nspname, t.typname, '%PGDATABASE%')
      FROM pg_catalog.pg_type t JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typtype = 'e' AND n.nspname = 'public'\gexec
