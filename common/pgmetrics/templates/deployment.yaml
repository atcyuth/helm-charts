{{- $registry := .Values.global.registry | required "missing value for .Values.global.registry" -}}

{{- /* TODO: dedupe with deployment.yaml */}}
{{- $defaultDBs := list
  (dict "name" .Release.Name "host" (printf "%s-postgresql" .Release.Name))
}}
{{- $databases := default $defaultDBs .Values.databases }}

{{- range $databases }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $.Release.Name }}-{{ .name }}-pgmetrics
  {{- if $.Values.reloader.enabled }}
  annotations:
    reloader.stakater.com/search: "true"
  {{- end }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-{{ .name }}-pgmetrics
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-{{ .name }}-pgmetrics
        component: {{ .name }}
        type: metrics
      annotations:
        kubectl.kubernetes.io/default-container: metrics
        configmap-etc-hash: {{ include (print $.Template.BasePath "/configmap-etc.yaml") $ | sha256sum }}
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        linkerd.io/inject: enabled
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ quote $.Values.alerts.prometheus }}
    spec:
      containers:
      - name: metrics
        image: "{{ $registry }}/{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        env:
        - name: DATA_SOURCE_URI
          value: {{ printf "%s.%s.svc" .host $.Release.Namespace }}:5432/{{ .name }}?sslmode=disable&application_name={{ $.Release.Name }}-{{ .name }}-pgmetrics
        - name: DATA_SOURCE_USER
          value: metrics
        - name: DATA_SOURCE_PASS
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-{{ .name }}-pguser-metrics
              key: postgres-password
        ports:
          - name: metrics
            containerPort: 9187
        args:
          - "--extend.query-path=/conf/custom-metrics.yaml"
          - "--log.level=info"
          {{- range $collector, $enabled := $.Values.collectors }}
          - "--{{ if not $enabled }}no-{{- end }}collector.{{ $collector }}"
          {{- end }}
        volumeMounts:
          - name: custom-metrics
            mountPath: /conf
            readOnly: true
        resources:
          limits:
            cpu:    {{ quote $.Values.resources.limits.cpu }}
            memory: {{ quote $.Values.resources.limits.memory }}
          {{- if not ($.Values.global.region | regexMatch "^qa-de-[2-6]$") }}
          requests:
            cpu:    {{ quote $.Values.resources.requests.cpu }}
            memory: {{ quote $.Values.resources.requests.memory }}
          {{- end }}
      volumes:
      - name: custom-metrics
        configMap:
          name: {{ $.Release.Name }}-{{ .name }}-pgmetrics-etc
          items:
          - key: custom-metrics.yaml
            path: custom-metrics.yaml
{{- end }}
